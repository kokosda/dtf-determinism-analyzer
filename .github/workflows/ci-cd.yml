name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for GitVersion
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
    
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      continue-on-error: true
      with:
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true

  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Run code analysis
      run: dotnet build --configuration Release --verbosity normal

  pack:
    name: Pack NuGet Package
    runs-on: ubuntu-latest
    needs: [build-and-test, code-analysis]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      env:
        CI: true  # Enables ContinuousIntegrationBuild
    
    - name: Pack NuGet package
      run: dotnet pack src/DtfDeterminismAnalyzer/DtfDeterminismAnalyzer.csproj --configuration Release --no-build --output ./artifacts
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ./artifacts/*.nupkg
        retention-days: 30

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: pack
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      id-token: write  # Required for OIDC token
      contents: read
    # Optional: Add environment protection for extra security
    # Uncomment to use environment secrets instead of repository secrets:
    # environment:
    #   name: production
    #   url: https://www.nuget.org/packages/DtfDeterminismAnalyzer
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: nuget-package
        path: ./artifacts
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    # FIRST-TIME SETUP REQUIRED:
    # 1. For initial package creation: Add NUGET_API_KEY secret and uncomment the API key line below
    # 2. After first successful publish: Remove the secret and rely on Trusted Publishers
    - name: Publish to NuGet
      # run: dotnet nuget push ./artifacts/*.nupkg --source https://api.nuget.org/v3/index.json --skip-duplicate
      # Uncomment for first-time publish only:
      run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      
  publish-github:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: pack
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: nuget-package
        path: ./artifacts
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Add GitHub Packages source
      run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
    
    - name: Publish to GitHub Packages
      run: dotnet nuget push ./artifacts/*.nupkg --source github --skip-duplicate